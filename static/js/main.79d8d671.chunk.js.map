{"version":3,"sources":["redux/hello/reducers.js","redux/hello/store.js","App.js","serviceWorker.js","index.js"],"names":["__webpack_require__","d","__webpack_exports__","UPDATE_NAME_ACTION_TYPE","updateName","state","arguments","length","undefined","action","type","text","HelloStore","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","Loading","react_default","a","createElement","Home","Loadable","loader","e","then","bind","loading","Hello","App","HashRouter","Switch","Route","exact","path","component","es","store","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yFAAAA,EAAAC,EAAAC,EAAA,sBAAAC,IAAAH,EAAAC,EAAAC,EAAA,sBAAAE,IAAO,IAAMD,EAA0B,mBAEhC,SAASC,IAA+B,IAApBC,EAAoBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAZ,GAAIG,EAAQH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC3C,OAAQC,EAAOC,MACX,KAAKP,EACD,OAAOM,EAAOE,KAClB,QACI,OAAON,sOCCJO,EALIC,YACfT,IACAU,OAAOC,8BAAgCD,OAAOC,gCCE5CC,SAAU,kBAAMC,EAAAC,EAAAC,cAAA,2BAEhBC,EAAOC,IAAS,CACpBC,OAAQ,kBAAMtB,EAAAuB,EAAA,GAAAC,KAAAxB,EAAAyB,KAAA,WACdC,QAASV,IAGLW,EAAQN,IAAS,CACrBC,OAAQ,kBAAMtB,EAAAuB,EAAA,GAAAC,KAAAxB,EAAAyB,KAAA,WACdC,QAASV,IAcIY,EAXH,kBACVX,EAAAC,EAAAC,cAACU,EAAA,EAAD,KACEZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,KACEb,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWd,IACjCH,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAUC,MAAOxB,GACfK,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAOE,KAAK,SAASC,UAAWP,QCdpBU,QACW,cAA7BvB,OAAOwB,SAASC,UAEe,UAA7BzB,OAAOwB,SAASC,UAEhBzB,OAAOwB,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,KAAK,SAAAyB,GACjCA,EAAaC","file":"static/js/main.79d8d671.chunk.js","sourcesContent":["export const UPDATE_NAME_ACTION_TYPE = 'USER_NAME_UPDATE';\r\n\r\nexport function updateName(state = '', action) {\r\n    switch (action.type) {\r\n        case UPDATE_NAME_ACTION_TYPE:\r\n            return action.text;\r\n        default:\r\n            return state;\r\n    }\r\n}","import { createStore } from 'redux';\r\nimport { updateName } from './reducers';\r\n\r\nconst HelloStore = createStore(\r\n    updateName,\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nexport default HelloStore;","import React from 'react';\r\nimport Loadable from 'react-loadable';\r\nimport { Provider } from 'react-redux';\r\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport HelloStore from './redux/hello/store';\r\nimport './App.css';\r\n\r\nconst Loading = () => <div>Loading...</div>;\r\n\r\nconst Home = Loadable({\r\n  loader: () => import('./routes/Home'),\r\n  loading: Loading,\r\n});\r\n\r\nconst Hello = Loadable({\r\n  loader: () => import('./routes/games/HelloContainer'),\r\n  loading: Loading,\r\n});\r\n\r\nconst App = () => (\r\n  <Router>\r\n    <Switch>\r\n      <Route exact path=\"/\" component={Home}/>\r\n      <Provider store={HelloStore}>\r\n        <Route path=\"/hello\" component={Hello}/>\r\n      </Provider>\r\n    </Switch>\r\n  </Router>\r\n)\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}